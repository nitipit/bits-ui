@use "sass:color";
@use "sass:map";
@use 'style/_mixin';

$pallete: null !default;
$scheme: null !default;
$border-radius: null !default;

.red {
    color: map.get($pallete, red);
}
.pink {
    color: map.get($pallete, pink);
}
.purple {
    color: map.get($pallete, purple);
}
.deep-purple {
    color: map.get($pallete, deep-purple);
}
.indigo {
    color: map.get($pallete, indigo);
}
.blue {
    color: map.get($pallete, blue);
}
.light-blue {
    color: map.get($pallete, light-blue);
}
.cyan {
    color: map.get($pallete, cyan);
}
.teal {
    color: map.get($pallete, teal);
}
.green {
    color: map.get($pallete, green);
}
.light-green {
    color: map.get($pallete, light-green);
}
.lime {
    color: map.get($pallete, lime);
}
.yellow {
    color: map.get($pallete, yellow);
}
.amber {
    color: map.get($pallete, amber);
}
.orange {
    color: map.get($pallete, orange);
}
.deep-orange {
    color: map.get($pallete, deep-orange);
}
.brown {
    color: map.get($pallete, brown);
}
.grey, .gray {
    color: map.get($pallete, grey);
}
.blue-grey, .blue-gray {
    color: map.get($pallete, blue-grey);
}

.bg-red {
    @include mixin.bg-color(map.get($pallete, red));
}
.bg-pink {
    @include mixin.bg-color(map.get($pallete, pink));
}
.bg-purple {
    @include mixin.bg-color(map.get($pallete, purple));
}
.bg-deep-purple {
    @include mixin.bg-color(map.get($pallete, deep-purple));
}
.bg-indigo {
    @include mixin.bg-color(map.get($pallete, indigo));
}
.bg-blue {
    @include mixin.bg-color(map.get($pallete, blue));
}
.bg-light-blue {
    @include mixin.bg-color(map.get($pallete, light-blue));
}
.bg-cyan {
    @include mixin.bg-color(map.get($pallete, cyan));
}
.bg-teal {
    @include mixin.bg-color(map.get($pallete, teal));
}
.bg-green {
    @include mixin.bg-color(map.get($pallete, green));
}
.bg-light-green {
    @include mixin.bg-color(map.get($pallete, light-green));
}
.bg-lime {
    @include mixin.bg-color(map.get($pallete, lime));
}
.bg-yellow {
    @include mixin.bg-color(map.get($pallete, yellow));
}
.bg-amber {
    @include mixin.bg-color(map.get($pallete, amber));
}
.bg-orange {
    @include mixin.bg-color(map.get($pallete, orange));
}
.bg-deep-orange {
    @include mixin.bg-color(map.get($pallete, deep-orange));
}
.bg-brown {
    @include mixin.bg-color(map.get($pallete, brown));
}
.bg-grey, .bg-gray {
    @include mixin.bg-color(map.get($pallete, grey));
}
.bg-blue-grey, .bg-blue-gray {
    @include mixin.bg-color(map.get($pallete, blue-grey));
}

.bg-int-red {
    @include mixin.bg-int-color(map.get($pallete, red));
}
.bg-int-pink {
    @include mixin.bg-int-color(map.get($pallete, pink));
}
.bg-int-purple {
    @include mixin.bg-int-color(map.get($pallete, purple));
}
.bg-int-deep-purple {
    @include mixin.bg-int-color(map.get($pallete, deep-purple));
}
.bg-int-indigo {
    @include mixin.bg-int-color(map.get($pallete, indigo));
}
.bg-int-blue {
    @include mixin.bg-int-color(map.get($pallete, blue));
}
.bg-int-light-blue {
    @include mixin.bg-int-color(map.get($pallete, light-blue));
}
.bg-int-cyan {
    @include mixin.bg-int-color(map.get($pallete, cyan));
}
.bg-int-teal {
    @include mixin.bg-int-color(map.get($pallete, teal));
}
.bg-int-green {
    @include mixin.bg-int-color(map.get($pallete, green));
}
.bg-int-light-green {
    @include mixin.bg-int-color(map.get($pallete, light-green));
}
.bg-int-lime {
    @include mixin.bg-int-color(map.get($pallete, lime));
}
.bg-int-yellow {
    @include mixin.bg-int-color(map.get($pallete, yellow));
}
.bg-int-amber {
    @include mixin.bg-int-color(map.get($pallete, amber));
}
.bg-int-orange {
    @include mixin.bg-int-color(map.get($pallete, orange));
}
.bg-int-deep-orange {
    @include mixin.bg-int-color(map.get($pallete, deep-orange));
}
.bg-int-brown {
    @include mixin.bg-int-color(map.get($pallete, brown));
}
.bg-int-grey, .bg-int-gray {
    @include mixin.bg-int-color(map.get($pallete, grey));
}
.bg-int-blue-grey, .bg-int-blue-gray {
    @include mixin.bg-int-color(map.get($pallete, blue-grey));
}
.bg-int-white {
    @include mixin.bg-int-color(white);
}
.bg-int-black {
    @include mixin.bg-int-color(black);
}

.color-primary, .color-p {
    $pallete: map.get($scheme, color-p);
    color: $pallete;
    &.l1 {
        color: color.adjust($pallete, $lightness: 10%);
    }
    &.l2 {
        color: color.adjust($pallete, $lightness: 20%);
    }
    &.l3 {
        color: color.adjust($pallete, $lightness: 30%);
    }
    &.l4 {
        color: color.adjust($pallete, $lightness: 40%);
    }
    &.d1 {
        color: color.adjust($pallete, $lightness: -10%);
    }
    &.d2 {
        color: color.adjust($pallete, $lightness: -20%);
    }
    &.d3 {
        color: color.adjust($pallete, $lightness: -30%);
    }
    &.d4 {
        color: color.adjust($pallete, $lightness: -40%);
    }
}

.bg-primary, .bg-p {
    $pallete: map.get($scheme, color-p);
    @include mixin.bg-color($pallete);
    &.l1 {
        @include mixin.bg-color(color.adjust($pallete, $lightness: 10%));
    }
    &.l2 {
        @include mixin.bg-color(color.adjust($pallete, $lightness: 20%));
    }
    &.l3 {
        @include mixin.bg-color(color.adjust($pallete, $lightness: 30%));
    }
    &.l4 {
        @include mixin.bg-color(color.adjust($pallete, $lightness: 40%));
    }
    &.d1 {
        @include mixin.bg-color(color.adjust($pallete, $lightness: -10%));
    }
    &.d2 {
        @include mixin.bg-color(color.adjust($pallete, $lightness: -20%));
    }
    &.d3 {
        @include mixin.bg-color(color.adjust($pallete, $lightness: -30%));
    }
    &.d4 {
        @include mixin.bg-color(color.adjust($pallete, $lightness: -40%));
    }
}

.color-complement, .color-c {
    color: map.get($scheme, color-complement);
}
.color-analog-left, .color-a1 {
    color: map.get($scheme, color-analog-left);
}
.color-analog-right, .color-a2 {
    color: map.get($scheme, color-analog-right);
}
.color-triadic-left, .color-t1 {
    color: map.get($scheme, color-triadic-left);
}
.color-triadic-right, .color-t2 {
    color: map.get($scheme, color-triadic-right);
}

.bg-complement, .bg-c {
    @include mixin.bg-color(map.get($scheme, color-complement));
}
.bg-analog-left, .bg-a1 {
    @include mixin.bg-color(map.get($scheme, color-analog-left));
}
.bg-analog-right, .bg-a2 {
    @include mixin.bg-color(map.get($scheme, color-analog-right));
}
.bg-triadic-left, .bg-t1 {
    @include mixin.bg-color(map.get($scheme, color-triadic-left));
}
.bg-triadic-right, .bg-t2 {
    @include mixin.bg-color(map.get($scheme, color-triadic-right));
}

.bg-int-primary, .bg-int-p {
    @include mixin.bg-int-color(map.get($scheme, color-p));
}
.bg-int-complement, .bg-int-c {
    @include mixin.bg-int-color(map.get($scheme, color-complement));
}
.bg-int-analog-left, .bg-int-a1 {
    @include mixin.bg-int-color(map.get($scheme, color-analog-left));
}
.bg-int-analog-right, .bg-int-a2 {
    @include mixin.bg-int-color(map.get($scheme, color-analog-right));
}
.bg-int-triadic-left, .bg-int-t1 {
    @include mixin.bg-int-color(map.get($scheme, color-triadic-left));
}
.bg-int-triadic-right, .bg-int-t2 {
    @include mixin.bg-int-color(map.get($scheme, color-triadic-right));
}

.border-top-radius {
    @include mixin.border-top-radius($radius: $border-radius);
}
.border-right-radius {
    @include mixin.border-right-radius($radius: $border-radius);
}
.border-bottom-radius {
    @include mixin.border-bottom-radius($radius: $border-radius);
}
.border-left-radius {
    @include mixin.border-left-radius($radius: $border-radius);
}

.lift-1 {
    @include mixin.lift-1();
}
.lift-2 {
    @include mixin.lift-2();
}
.lift-3 {
    @include mixin.lift-3();
}
.lift-4 {
    @include mixin.lift-4();
}
.lift-5 {
    @include mixin.lift-5();
}